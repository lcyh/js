/**
 * 1.闭包是什么:闭包是指有权访问另一个函数作用域中变量的函数
 * 2.形成闭包的原因:内部的函数存在外部作用域的引用就会导致闭包
 * 3.闭包变量存储的位置:闭包中的变量存储的位置是堆内存。(
 *  假如闭包中的变量存储在栈内存中，那么栈的回收 会把处于栈顶的变量自动回收。
    所以闭包中的变量如果处于栈中那么变量被销毁后，闭包中的变量就没有了。
    所以闭包引用的变量是出于堆内存中的。
  )
*  4.闭包的作用 (
     1.保护函数的私有变量不受外部的干扰。形成不销毁的栈内存。
     2.保存，把一些函数内的值保存下来。闭包可以实现方法和属性的私有化
)
 */
// 函数的上级作用域在哪里创建创建的，上级作用域就是谁
//题目1
var a = 10
function foo() {
    console.log(a)
}

function sum() {
    var a = 20
    foo()
}

sum() // 10
/* 
函数 foo() 是在全局下创建的，所以 a 的上级作用域就是 window，输出就是 10

输出:10
*/

//题目2
var n = 10
function fn() {
    var n = 20
    function f() {
        n++;
        console.log(n)
    }
    f()
    return f
}

var x = fn() // 21
x() //22
x() //23
console.log(n) // 10
/*
稍微提个醒，单独的 n++ 和 ++n 表达式的结果是一样的

思路：fn 的返回值是什么变量 x 就是什么，这里 fn 的返回值是函数名 f 也就是 f 的堆内存地址，
x() 也就是执行的是函数 f()，而不是 fn()，输出的结果显而易见

输出:
    21
    22
    23
    10
*/
